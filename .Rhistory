coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_dots(shape = 10, size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_symbols(shape = 22) +
tm_dots(size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_symbols(shape = 23,size=0.2) +
tm_dots(size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_symbols(shape = 23,size=0.02) +
tm_dots(size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_symbols(shape = 23,size=0.005) +
tm_dots(size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_symbols(shape = 23,size=0.005) +
tm_dots(shape = 20,size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_dots(shape = 20,size = 0.01)
hillsh <- Bor_hs
# make sf object from coordinates -> you will learn that also later
ras_bio_asc_01_cr_sf <- st_as_sf(
data.frame(coordinates(ras_bio_asc_01_cr)), ## create dataframe of coordinates
coords = c("x", "y"), ## define columns for the coordinates
crs = 4326, ## define crs, 4326 is the EPSG code
sf_column_name = "geometry" ## sf needs a geometry column and you have to name it
)
# interactive plot
tmap_mode(mode = "view")
tm_shape(shp = hillsh, raster.downsample = TRUE)  +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::topo.colors(20),alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01, raster.downsample = TRUE) +
tm_raster(palette = grDevices::rainbow(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_symbols(shape = 23,size = 0.01)
# static plot
tmap_mode(mode = "plot")
tm_shape(shp = hillsh, raster.downsample = TRUE) +
tm_raster(palette = "Greys") +
tm_shape(shp = ras_bio_asc_24, raster.downsample = TRUE) +
tm_raster(palette = grDevices::terrain.colors(10), alpha = 0.3) +
tm_shape(shp = ras_bio_asc_01_cr_sf) +
tm_dots(shape = 1, size = 0.05)
# Cool 3D plots with rgl library, e.g. 'rgl.surface'
persp(x = ras_bio_asc_24, xlab = "Easting", ylab = "Northing",
zlab = "elevation", r = 5, d = 1.5, expand = 0.1,
ticktype = "detailed")
proj_moll = CRS("+proj=moll +lat_0=65 +lon_0=10") ## Mollweide projection
Bor_dem_moll <-projectRaster(ras_bio_asc_01_cr, crs = proj_moll)
persp(Bor_dem_moll, xlab = "Easting", ylab = "Northing",
zlab = "elevation", main = "Elevation model of Borneo",
r = 1, d = 5.5, expand = 0.1, ticktype = "detailed")
proj_moll = CRS("+proj=moll +lat_0=65 +lon_0=10") ## Mollweide projection
Bor_dem_moll <-projectRaster(ras_bio_asc_01_cr, crs = proj_moll)
persp(Bor_dem_moll, xlab = "Easting", ylab = "Northing",
zlab = "elevation", main = "Elevation model of Borneo",
r = 1, d = 5.5, expand = 0.1, ticktype = "detailed")
maps_wd
# gives names and full path of file
files.full <- list.files(path = maps_wd, pattern = '.asc$', full.names = TRUE)
# files.full # check also
files.full[1:3]
# names only
files.rel <- list.files(path = maps_wd, pattern = '.asc$', full.names = FALSE)
files.rel[1:3]
files.rel
predictors <- stack(x = files.full[c(9, 12, 22, 24)])
projection(x = predictors) # crs(predictors)
projection(x = predictors) <- CRS(projargs = "+proj=longlat +datum=WGS84")
predictors@layers # this is a list! Address single layers with [[ ]]
plot(predictors@layers[[4]])
plot(x = predictors)
tmap_mode(mode = "plot")
tm_shape(shp = predictors) + tm_raster()
rasterVis::bwplot(x = predictors[[c(1, 2)]]) # bwplot(predictors)
## n.b. double [[ ]] because stack is a list of spatial rasters
raster_df <- na.omit(data.frame(values(predictors[[c(1,3)]])))
raster_names <- names(raster_df)
raster_ct    <- dim(raster_df)[1]
df2 <- data.frame(val = c(raster_df[,names(raster_df)[1]],
raster_df[,names(raster_df)[2]]))
df2$grp <- rep(raster_names , each = raster_ct)
head(df2)
## take a random subsample of the data to not crash your PC when plotting:
a <- sample(x = nrow(df2), size = 1000, replace = FALSE)
df3 <- df2[a,]
## first omit NA values (which represent the ocean around Borneo)
raster_df <- na.omit(data.frame(values(predictors[[c(1,3)]])))
raster_names <- names(raster_df)
raster_ct    <- dim(raster_df)[1]
df2 <- data.frame(val = c(raster_df[,names(raster_df)[1]],
raster_df[,names(raster_df)[2]]))
df2$grp <- rep(raster_names , each = raster_ct)
head(df2)
## take a random subsample of the data to not crash your PC when plotting:
a <- sample(x = nrow(df2), size = 1000, replace = FALSE)
df3 <- df2[a,]
## a violin-box plot combination with raw data strips
p <- ggplot(data = df3, aes(x = grp, y = val)) +
geom_violin(scale = "width", fill = "grey85", color = "#3366FF", bw = 20) +
geom_boxplot(width = 0.15, size = 0.8, outlier.color = NA) + ## remove outliers
geom_jitter(height = 0, width = 0.05, alpha = 0.2, size = 1.5, color = 'blue')
p
p +
facet_wrap(vars(grp), scales = "free") +
scale_x_discrete(guide = "none")  + ## remove axis ticks and labels on x
labs(x = NULL, y = "Value") +
theme_minimal(base_size = 15) ## set custom plot style
# save the last plot
ggsave(paste0(output_wd, "/savedggplot.pdf"), width = 5, height = 5, dpi = 600)
## or use here:
# ggsave(here("output", "savedggplot.pdf"), width = 5, height = 5, dpi = 600)
df3_bio9 <- subset(df3, df3$grp == 'bio_asc_09')
df3_bio24 <- subset(df3, df3$grp == 'bio_asc_24')
p1 <- ggplot(data = df3_bio9, aes(x = grp, y = val)) +
geom_violin(scale = "width", fill = "grey85", colour = "#3366FF") +
geom_boxplot(width = 0.2, size = 0.8, outlier.color = NA) + ## remove outliers
geom_jitter(height = 0, width = 0.05, alpha = 0.2, size = 1.5, colour = "#3366FF") +
labs(x = NULL, y = "Value")
p2 <- ggplot(data = df3_bio24, aes(x = grp, y = val)) +
geom_violin(scale = "width", fill = "grey85", colour = "#3366FF") +
geom_boxplot(width = 0.2, size = 0.8, outlier.color = NA) + ## remove outliers
geom_jitter(height = 0, width = 0.05, alpha = 0.2, size = 1.5, colour = "#3366FF") +
labs(x = NULL, y = "")
## multipanel plot with {patchwork}
(p1 + p2) * theme_minimal(base_size = 15) ## apply custom style
#- Extract information from all rasters in one command
# cellStats(predictors, 'mean')
round(x = cellStats(x = predictors, stat = 'mean'), digits = 2)
writeRaster(x = hillsh,
filename = paste0(output_wd,"/hillshade.asc"),
# or use here: here("output", "hillshade.asc")
format = "ascii",
overwrite = TRUE,
NAflag = -9999)
new_ras <- ras_bio_asc_01 + ras_bio_asc_24 + 100
# collapse 20*20 cells into 1 using function 'mean':
ras_bio_asc_01_agg <- aggregate(x = ras_bio_asc_01, fact = 20, fun = mean)
par(mfrow = c(1,2)) # recap from course 1: plots in 1 row and 2 columns
plot(x = new_ras, col = rev(rainbow(5)))
plot(ras_bio_asc_01_agg)
par(mfrow = c(1,1)) # remember to set it back to the default
# convert ras_bio_asc_01 to degree Celsius units (divide by 10)
range(values(ras_bio_asc_01), na.rm = TRUE)
mean.t.c <- ras_bio_asc_01 / 10
range(values(mean.t.c), na.rm = TRUE)
# find areas with mean annual temp >= 25 deg C
mean.t.c.25 <- mean.t.c >= 25
plot(x = mean.t.c.25)
cells <- cellFromRowCol(object = ras_bio_asc_01_cr, row = 5, col = 1:3)
cells    ## returns cell ID number, the index / rownumber!
extract(x = ras_bio_asc_01_cr, y = cells) ## returns cell values!
plot(x = ras_bio_asc_01_cr)
## to plot the points on top, insert the 'cells' index into
## the data frame of the coordinates of the RasterLayer object ras_bio_asc_01_cr
points(x = coordinates(obj = ras_bio_asc_01_cr)[cells,], col = "blue")
center_x = floor(nrow(predictors) / 2) ## learn about the functions round(),
center_y = floor(ncol(predictors) / 2) ##                 ceiling(), floor()
center_x; center_y
stack_cells <- cellFromRowCol(
object = ras_bio_asc_01,
row = center_x:(center_x + 5),
col = center_y:(center_y + 5)
)
head(stack_cells)
## finally, extract them:
pred_dat <- extract(predictors, stack_cells)
head(pred_dat)
mastertable <- data.frame(stack_cells, pred_dat)
mastertable
xy = xyFromCell(object = ras_bio_asc_01_cr, cell = cells)
# coordinates(ras_bio_asc_01_cr)[cells,]
extract(x = ras_bio_asc_01_cr, y = xy)
# extract(ras_bio_asc_01_cr, cells)
## Change values, e.g. for adding forest or creating a corridor
## take care! -> irreversible! better work on a copy!
copy_ras <- ras_bio_asc_01_cr
copy_ras[cells] <- 250
plot(x = copy_ras)
## calculate distance
my_dist <- distanceFromPoints(object = ras_bio_asc_01_cr, xy = xy)
plot(x = my_dist) ## units?
xy
points(xy)
## nicer plot adding the points from which a distance should be computed.
## please ignore the following 4 lines, you will learn that when
## working with vector data below
xy_sf <- st_as_sf(x = data.frame(xy),
coords = c("x","y"),
crs = 4326,
sf_column_name = "geometry" )
tmap_mode(mode = "plot")
tm_shape(shp = my_dist) +
tm_raster(n = 100, palette = rev(grDevices::terrain.colors(100)),
legend.show = FALSE) +
tm_shape(shp = xy_sf) +
tm_dots(size = 1)
cells1 <- c(cells, 250, 360) ## add two more points
xy = xyFromCell(ras_bio_asc_01_cr, cells1) ## = coordinates(Bor_mat_cr)[cells,]
my_dist <- distanceFromPoints(ras_bio_asc_01_cr, xy)
plot(my_dist) #units?
## Border of countries and provinces of Borneo
## - only loading columns 1:3, 5, 7, 17, 18 of attribute table:
Borneo_shp <- st_read(dsn = maps_wd, layer = "borneo_admin")[, c(1:3, 5, 7, 17, 18)]
## Protected areas (National Parks, Nature Reserves, Forest Reserves)
PA_shp     <-  st_read(dsn = maps_wd,
layer = "Bor_PA")[, c(1:4)]
## fix problematic polygons
PA_shp <- st_make_valid(PA_shp)
## main rivers
River_shp  <- st_read(dsn = maps_wd, layer = "sn_100000")
### the 'old' sp package would work with the `readOGR` command from the `{rgdal}` package:
Admin_shp <- readOGR(dsn = maps_wd, layer = "borneo_admin",)[,c(1:3,5,7,17,18)]
## transformations
Admin_sf <- as(Admin_shp, "sf") ## from sp object to sf object
Admin_sp <- as(Admin_sf, "Spatial") ## from sf to sp object
## Please note the similarity to accessing info from rasters.
str(object = extent(PA_shp))
extent(PA_shp)@xmin
names(x = PA_shp) ## returns column names of a.t.
## Much more complex than sf-objects.
class(Admin_shp)
str(object = extent(Admin_shp))
extent(Admin_shp)@xmin
names(x = Admin_shp) ## returns column names of a.t.
## Please note the similarity to accessing info from rasters.
str(object = extent(PA_shp))
extent(PA_shp)@xmin
names(x = PA_shp) ## returns column names of a.t.
summary(object = PA_shp)
str(object = PA_shp)
PA_shp
attributes(x = PA_shp)
head(x = PA_shp)
tail(x = PA_shp)
which(x = PA_shp$COUNTRY == 'Malaysia')
ggplot(data = PA_shp) +
geom_sf(fill = "chartreuse3", color = NA) +
labs(x = "Longitude", y =  "Latitude",
title = "Protected areas") +
theme_minimal(base_size = 15) ## set custom plot style
tmap_mode(mode = "plot")
tm_shape(shp = PA_shp[, 1]) +
tm_polygons(col = "SITE_ID", palette = grDevices::terrain.colors(5),
style = "quantile") ## color scheme by quantiles - STEPH: Quartiles for IDs?! Makes no sense at all?? Why not simply one color?
tmap_mode(mode = "plot")
tm_shape(shp = PA_shp[, 1]) +
tm_polygons(col = "SITE_ID", palette = grDevices::terrain.colors(5))
tmap_mode(mode = "plot")
tm_shape(shp = PA_shp[, 1]) +
tm_polygons(col = "SITE_ID", palette = grDevices::terrain.colors(5),
style = "quantile") ## quantiles because of the large si
tmap_mode(mode = "plot")
tm_shape(shp = PA_shp[, 1]) +
tm_polygons(col = "SITE_ID", palette = grDevices::terrain.colors(5))
# plot(Borneo_shp) ## not run
plot(Borneo_shp[,1]) ## select column
plot(as(Borneo_shp, "Spatial")) ## plot geometry without information of a col
plot(Admin_sp)
# spplot(Admin_sp) ## Don't do that! Each column of the a.t. will be plotted
head(Admin_sp)
spplot(Admin_sp[6]) ## only plot one of the geometries, coloured e.g. by shape_length
plot(Admin_sp)
tmap_mode(mode = "plot")
tm_shape(shp = Borneo_shp) +
tm_polygons(border.col = "deepskyblue4") +
tm_shape(PA_shp[,1]) +
tm_polygons(border.col = "black") +
tm_shape(PA_shp[1, ]) +
tm_polygons(border.col = "red")
tmap_mode(mode = "plot")
tm_shape(shp = Borneo_shp) +
tm_polygons(border.col = "deepskyblue4") +
tm_shape(PA_shp[,1]) +
tm_polygons(border.col = "black") +
tm_shape(PA_shp[1, ]) +
tm_polygons(border.col = "red")
Mal_PA_shp <- subset(PA_shp, PA_shp$COUNTRY == 'Malaysia')
st_write(obj = Mal_PA_shp,
dsn = output_wd,
layer = 'test',
driver = 'ESRI Shapefile',
delete_layer = TRUE)
tmap_mode(mode = "plot")
tm_shape(shp = Borneo_shp) +
tm_polygons(border.col = "blue") +
tm_shape(shp = Mal_PA_shp) +
tm_polygons(col = "red")
fewPA <- Mal_PA_shp[c(1:5), 1]
tmp <- extract(x = ras_bio_asc_24, y = fewPA) ## returns a list — each element contains he elevation raster cells (ras_bio_asc_24)
str(tmp)
#lapply(tmp, FUN = summary)
lapply(tmp, FUN = summary)
unlist(lapply(tmp, FUN = mean, na.rm = TRUE))
fewPA <- Mal_PA_shp[c(1:5), 1]
tmp <- extract(x = ras_bio_asc_24, y = fewPA) ## returns a list — each element contains the elevation raster cells (ras_bio_asc_24)
str(tmp)
#lapply(tmp, FUN = summary)
## Append mean elevation:
fewPA$mean_elevation <- round(x = unlist(lapply(tmp, FUN = mean, na.rm = TRUE)))
fewPA
# st_area(x = Borneo_shp) ## returns long vector
head(st_area(x = Borneo_shp))
Borneo_shp_moll <-  st_transform(Borneo_shp, c("+proj=moll +datum=WGS84"))
class(Borneo_shp_moll) #sf object, data.frame!
tmap_mode(mode = "plot")
tm_shape(shp = Borneo_shp_moll) +
tm_polygons(border.col = "blue") ## do you see the difference?
head(st_area(x = Borneo_shp_moll)) ## units?
ggplot(Borneo_shp_moll) +
geom_sf(color = "blue") +
theme_minimal(base_size = 15) ## set custom plot style
Mal_Borneo_shp <- subset(Borneo_shp_moll, Borneo_shp_moll$NAME_0 == 'Malaysia')
head(st_area(x = Mal_Borneo_shp) / 1000000) ## or / 1e6
## better: use set_units to change the units from m^2 to km^2
Mal_Borneo_shp$area <- units::set_units(x = st_area(x = Mal_Borneo_shp), value = km^2)
head(Mal_Borneo_shp$area)
st_area(x = Borneo_shp_moll[3, ]) ## for a single polygon
head(st_area(x = Borneo_shp_moll, byid = TRUE)) ## for all polygons
area_km2 <- set_units(x = st_area(x = Borneo_shp_moll, byid = TRUE), value = km^2)
Borneo_shp_moll = data.frame(Borneo_shp_moll, area_km2)
head(x = Borneo_shp_moll)
#gArea(Borneo_shp_moll, byid=TRUE) / 1e6 ## does not work, as Borneo_shp_moll is sf-object!
head(rgeos::gArea(Admin_sp, byid = TRUE) / 1e6) ## what does the warning message mean? -> check crs!
Admin_sp_moll <- spTransform(Admin_sp, c("+proj=moll +datum=WGS84"))
head(rgeos::gArea(Admin_sp_moll, byid = TRUE) / 1e6) ## now it works!
pt_shp <- st_read(dsn = paste0(recs_wd, "/FCsim.shp"))
pt_shp  ## crs is missing!
st_crs(pt_shp) <- 4326 ## set it with command st_crs
pt_shp
pt_file <- paste0(recs_wd, "/MyNewSpecies.csv")
df_recs <- read.table(file = pt_file, header = TRUE, sep = ',')
class(x = df_recs)
head(x = df_recs)
plot(x = as(Borneo_shp, "Spatial"), col = 'grey', border = 'white') ## polygon
points(x = df_recs$long, df_recs$lat, cex = 0.5, pch = 15) ## simple d.f.!
plot(x = as(pt_shp, "Spatial"), col = 'blue', add = TRUE)
recs_sf <- st_as_sf(x = data.frame(df_recs),
coords = c("long", "lat"),
crs = 4326,
sf_column_name = "geometry")
tmap_mode(mode = "plot")
tm_shape(shp = Borneo_shp) +
tm_polygons(col = "grey", border.col = "white") +
tm_shape(shp = recs_sf) +
tm_dots(shape = 3, size = 0.25) +
tm_shape(shp = pt_shp) +
tm_dots(col = "blue")
tmap_mode(mode = "plot")
tm_shape(shp = Borneo_shp) +
tm_polygons(col = "grey", border.col = "white") +
tm_shape(shp = recs_sf) +
tm_dots(shape = 3, size = 0.15) +
tm_shape(shp = pt_shp) +
tm_dots(col = "blue")
## retrieve the geometry (location) indices of PA_shp at
## the locations of sp_recs: which points are in PA_shp
insidePA <- st_intersection(x = recs_sf, y = PA_shp)
insidePA
nrow(recs_sf)
nrow(insidePA)
# for a RASTER: extract mean ann. temp. from ras_bio_asc_01
# and add it to a.t.
mean_t <- extract(x = ras_bio_asc_01, y = recs_sf)
recs_sf$mean_t <- mean_t
mean(x = recs_sf$mean_t) # hist(sp_recs_sf$mean_t)
plot(insidePA)
tmap_mode(mode = "plot")
tm_shape(shp = hillsh) +
## hillshading
tm_raster(palette = "Greys",
legend.show = FALSE,
alpha = 0.75) +
## topographical model
tm_shape(shp = ras_bio_asc_24) +
tm_raster(palette = terrain.colors(25),
alpha = 0.2,
legend.show = FALSE) +
## rivers
tm_shape(shp = River_shp) +
tm_lines(col = "dodgerblue3") +
## protected areas
tm_shape(shp = PA_shp) +
tm_polygons(border.col = "white",
alpha = 0) +
## locations
tm_shape(shp = recs_sf) +
tm_dots(shape = 16,
size = 0.3) +
tm_shape(shp = insidePA) +
tm_dots(col = "red",
size = 1,
shape = 3) +
## styling
tm_layout(title = "END OF SESSION",
title.color = "darkgrey",
title.position = c(0.05, 0.9),
title.size = 2)
include_graphics("./output/BorneoMap_4326_tmap.png")
root_wd
getwd()
here::here()
